[["index.html", "Intro to R and Rstudio Chapter 1 Welcome 1.1 What is Data Visualization? 1.2 Course organization 1.3 Evaluation 1.4 Course goals 1.5 Accessibility", " Intro to R and Rstudio Andrew Irwin 21/09/2020 Chapter 1 Welcome Data visualization is a critical skill for anyone interested in using data to think and persuade. Its essence is converting raw data into a visual form that can be more easily apprehended than the full dataset. As a result, almost every data visualization is a simplification and approximation of a raw dataset, and thus involves a perspective – the goals and biases of the person producing the visualization. This course focusses on three aspects: what makes a good data visualization, designing and improving a visualization, and the technical computer skills needed to create visualizations. 1.1 What is Data Visualization? Data visualization is the practice of turning data into graphics which can be more easily interpreted than the raw data. Data visualization approaches vary. For some purposes, highly customized graphic design and visual style are paramount. That’s not our focus. We emphasize standardized graphical presentations – which spans a wide variety of visualizations – that minimize the use of graphical elements not directly linked to the data. 1.1.1 Goals of data visualization Enable visual interpretation of data. Guide reader to insight. Represent the data honestly. 1.2 Course organization Each week will be structured around lessons, interactions, and evaluation of what you’ve learned. The detailed outline provides specifics for each week. Lessons consist of course notes, an accompanying mini-lecture video, and some supplemental reading from the course textbooks. There will be 2-3 lessons each week. Each week there will be live interactions during scheduled class time for discussion of lesson material and computing demonstration. Tasks are opportunities to test your understanding of the key concepts from each lesson and demonstrate you have developed basic profiency with some computing skills. Most lessons will have a task for you to complete. Assignments combine skills from multiple lessons into a meaningful data visualization activity. These will require using skills from multiple tasks and applying the content of lessons in thoughtful and sometimes creative ways. The final project is an opportunity to combine many of the skills learned in the course. You will explore, analyze, and present to a reader an analysis of a dataset of your choice. The proposal will select a dataset and describe some of your planned analyses. The report will be a polished document showing off many of the ideas of the course using this dataset. 1.3 Evaluation Tasks (30%, roughly 2 per week) Assignments (40%, roughly 1 every two weeks) Project (Proposal, 5%; Report, 25%) 1.4 Course goals Science data visualization manifesto Communication Reanalysis Repeatable Convincing Auditable Transparent Correcting mistakes Creative Commons Software tools Complexity tolerant Adaptable Collaboration. Future you. Peers. Employers. Consumers. 1.5 Accessibility Data visualization is, as the name implies, the act of producing a product to be seen. This is a useful goal because our brains are very good at processing some kinds of visual information. Training to read visualizations can greatly increase the ability to extract information from a visualization, so it is important to know your audience – students, the general public, people with well developed quantiative skills, or domain experts for the data you are presenting. All of these factors are central to knowing if a visualization is suitable and effective. Our target audience is university students. Not everyone has the same visual abilities. Some people have vision that differs from the most common experience in some way – perceiving colours differently, reduced acuity, and other differences all the way to complete blindness. We should always keep these differences in mind when producing visualizations. To take the hardest challenge head on, what is the value in producing a visualziation for someone who cannot see it? First, data visualization is a process that uses the creator’s visual and technical skills to preent features of a dataset. Second, any data visualization should be accompanied by a written description of the message to be conveyed. Ideally the visual and written aspects will complement each other. A visualization does not “say” anything by itself; a written interpretation is an essential part of the process. or "],["syllabus.html", "Chapter 2 Syllabus 2.1 Course Description 2.2 Course Prerequisites 2.3 Course Objectives and Learning Outcomes 2.4 Course materials 2.5 Course structure 2.6 Evaluation 2.7 Software 2.8 List of lessons 2.9 Letter grades 2.10 Course Policies 2.11 University Policies and Statements", " Chapter 2 Syllabus This is the syllabus for the Data visualization (STAT 2430) course in Winter 2021 at Dalhousie University. 2.1 Course Description Data visualization is the art and science of turning data into readable graphics. We will explore how to design and create data visualizations based on data available and tasks to be achieved. This course aims to introduce students to data visualization, including both the principles and techniques. Students will learn the value of visualization, specific techniques and understand how to select the best visualization method. 2.2 Course Prerequisites At least one MATH or STAT course at or above the 1000 level 2.3 Course Objectives and Learning Outcomes Visualization as communication - language for communication (visual); computer code - evaluate communication effectiveness by peer-review and critical, constructive feedback - Explore the process of refining plots to highlight key features of the data, labeling items of interest, annotating plots, and changing overall appearance. - Develop strategies for presenting graphical results in different formats and to different sorts of audiences. - Develop skills for independently learning new data visualization methods and software Visual impact and aesthetic aspects of graphics - Understand the relationship between the structure of your data and the perceptual features of your graphics. - Describe aesthetic aspects of good plots. Use length, shape, size, colour, and other features to effectively display data and enable comparitive visual interpretation Computing tools - Install R, Rstudio, add-on packages - Ensure R can find your data - Access and interpret help resources (built-in help, vignettes, web pages, online discussion forums, blogs). - Reproducible documents with R markdown, git/github - Create graphs with ggplot2 for continuous and categorical variables with informative legends. - Add error bars, linear models (OLS, robust regression, polynomials, quantile regression), smooths (LOESS, GAM), labels, and other annotations - Create small-multiple (facetted) plots. Use the principles of tidy data tables to facilitate transformation and analysis of data. Reshape data to make it tidy. Summarize and transform data using dplyr Reshape data using pivots Create maps and some alternatives for presenting spatial data. Statistical models - Fit various modeling techniques such as LOESS, OLS, robust regression lines, polynomial curve, and quantile regression lines and generate predictions. - Learn how to extract three kinds of model object information in R such as component-level, observation-level and model-level to compare different statistical models. - Understand the Principal component analysis (PCA) technique for reducing the dimensionality of such datasets, increasing interpretability while minimizing information loss by maximizing variance. - Understand multidimensional scaling (MDS) to visualize and compare similarities and dissimilarities between sets of objects. - Divide observations into homogeneous and distinct groups using an iterative Kmeans algorithm. 2.4 Course materials Course notes: Andrew J Irwin (2021) Data visualization. Online at https://github.com/andrewirwin/stat2430 (publish at stat2430.github.io) Will be revised throughout the course. Textbook: Kieran Healy (2018) Data Visualization: A Practical Introduction. Princeton University Press. Online at https://socviz.co Supplemental textbooks: Garret Grolemund &amp; Hadley Wickham (2017) R for data science. O’Reilly. Online at https://r4ds.had.co.nz/ Claus O. Wilke (2019) Fundamentals of data visualization. O’Reilly. Online at https://clauswilke.com/dataviz/ 2.5 Course structure Each week will be structured around the following components: - Recorded mini-lectures for each lesson (linked to course notes and slides) - Independent reading linked to each lesson - Interactive discussion of the week’s activities (Tuesday, 8:30 am) - Live coding tutorial / lab (linked to materials created before and after the meeting, Thursday 8:30 am) - Opportunities to develop and demonstrate your knowledge (tasks, assignments, and a term project) If you have questions about the course material, please submit them on the following discussion forum. If you have questions specific to your situation that should not be shared with the class, please send me an email. Please only use email for communication that should be private, as general questions are best asked in public on the discussion forum where everyone in the class can benefit from the exchange. Please feel free to use the discussion forum to talk with other classmates and help each other. Our first week of class does not meet on Tuesday but does meet on Thursday. This first meeting will be an introduction to the course and interactive discussion. We will use Collaborate Ultra accessed through Brightspace for the interactive sessions. Generally these will be recorded so that you can watch them later if you are unable to participate. You are strongly encouraged to come to these meetings. First, they are intended to be the primary forum for asking questions and discussing course material. Second, they will help give your work on the course structure. I strongly encourage you to “raise your hand” during the discussion and ask questions using your voice. Some students prefer to use the chat to ask questions, and that is fine with me, but from my perspective it leads to a more disjointed and less useful interaction. 2.6 Evaluation Tasks for most lessons. Equally weighted, total 30%. Assignments approximately every two weeks. Equally weighted, total 40%. Term project, divided into two components Proposal, due Friday 5 March, 5% Report, due Friday X April, 25% Tasks are due on Friday of the week they are assigned, unless otherwise noted. Late work will be accepted without penalty until the work is graded and solutions are posted. After that, no later work will be accepted, but if an accommodation is requested and granted, the value of that work will be redistributed to other tasks or assignments. If you anticipate not being able to submit the proposal or report on time, please contact me by email. 2.7 Software The statistical software R/RStudio will be used in this course. No prior experience with R/RStudio is assumed, and we’ll take some class time to learn the software. Free R download: Free RStudio download: 2.8 List of lessons Aim for 36. About 750 word script for each. Plus slides. Plus links. Plus live coding examples. 01 What is Data Visualization? 02 Course Overview - objectives and sample skills (computing, data) 03 Look at data. Healy Chapter 1 04 The tools we will use and why: R, Rstudio, ggplot, dplyr, markdown, git, github 05a Computer preliminaries. Installing R, Rstudio, packages, creating github account 05b Introduction to main features of Rstudio 06 Get started. Healy Chapter 2 07 Introduction to the Grammar of Graphics 08 Make a plot. Healy Chapter 3 09 Customizing plots: shape, color, lines, and more 10 Summarizing data with dplyr 11 Show the right numbers. Healy Chapter 4 12 Graph tables, add labels, make notes. Healy Chapter 5 13 Version control concepts 14 Working with Git 15 Getting help from R and online 16 Plotting small multiples (facets) 17 Reading data (csv, tsv, xlsx); import menu item; r commands 18 A bit more about R. Healy Appendix 19 Data validation (pointblank) 20 Tidy data 21 Making data tidy (datapasta) 22 Work with models. Healy Chapter 6 23 linear models (lines, polynomials, robust, quantile); equationomatic 24 loess, GAM 25 kmeans 26 MDS (?) 27 Draw maps. Healy Chapter 7 28 Making maps and chloropleths 29 Refine your plots. Healy Chapter 8 30 themes, etc 31 annotations 32 graphics output (PDF, png, sizes, colors, themes; ragg) repurposing graphics for different media and purposes 2.9 Letter grades Your numerical grade will be converted to a letter grade for the course using the Dalhousie Common Grade Scale. First your numerical grade will be rounded up to the nearest integer, then it will be converted to a letter using this table. html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #gwwwgflhan .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #gwwwgflhan .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #gwwwgflhan .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #gwwwgflhan .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #gwwwgflhan .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #gwwwgflhan .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #gwwwgflhan .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #gwwwgflhan .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #gwwwgflhan .gt_column_spanner_outer:first-child { padding-left: 0; } #gwwwgflhan .gt_column_spanner_outer:last-child { padding-right: 0; } #gwwwgflhan .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #gwwwgflhan .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #gwwwgflhan .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #gwwwgflhan .gt_from_md > :first-child { margin-top: 0; } #gwwwgflhan .gt_from_md > :last-child { margin-bottom: 0; } #gwwwgflhan .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #gwwwgflhan .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #gwwwgflhan .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #gwwwgflhan .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #gwwwgflhan .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #gwwwgflhan .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #gwwwgflhan .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #gwwwgflhan .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #gwwwgflhan .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #gwwwgflhan .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #gwwwgflhan .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #gwwwgflhan .gt_sourcenote { font-size: 90%; padding: 4px; } #gwwwgflhan .gt_left { text-align: left; } #gwwwgflhan .gt_center { text-align: center; } #gwwwgflhan .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #gwwwgflhan .gt_font_normal { font-weight: normal; } #gwwwgflhan .gt_font_bold { font-weight: bold; } #gwwwgflhan .gt_font_italic { font-style: italic; } #gwwwgflhan .gt_super { font-size: 65%; } #gwwwgflhan .gt_footnote_marks { font-style: italic; font-size: 65%; } Letter grade Grade range A+ 90-100 A 85-89 A- 80-84 B+ 77-79 B 73-76 B- 70-72 C+ 65-69 C 60-64 C- 55-59 D 50-54 F 0-49 2.10 Course Policies Credit cannot be given for late assignments, because the solutions are posted immediately after the due date. The assignment weights will be shifted to the rest of the assignments if the missed assignments are due to illness. There is no make-up for the quizzes and tests. If the missed quiz or test is due to illness, the weight for the quiz or test will be shifted to the rest of the quizzes or test. If there is no decent reason for the missed quiz or test, the missed quiz or test grade will be zero. For the above weight transfer to apply, students need to provide the {} for missed academic requirement in this course. Each student can use the {} maximally twice in the term. Students need to finish all assignments, quizzes, tests and final project independently, collaboration or copying solutions from any other sources are not allowed and thus deemed as plagiarism for this course. 2.11 University Policies and Statements This course is governed by the academic rules and regulations set forth in the University Calendar and by Senate 2.11.1 Missed or Late Academic Requirements due to Student Absence As per Senate decision instructors may not require medical notes of students who must miss an academic requirement, including the final exam, for courses offered during fall or winter 2020-21 (until April 30, 2021). Information on regular policy, including the use of the Student Declaration of Absence can be found here: 2.11.2 Academic Integrity At Dalhousie University, we are guided in all of our work by the values of academic integrity: honesty, trust, fairness, responsibility and respect (The Center for Academic Integrity, Duke University, 1999). As a student, you are required to demonstrate these values in all of the work you do. The University provides policies and procedures that every member of the university community is required to follow to ensure academic integrity.\\ Information: 2.11.3 Accessibility The Advising and Access Services Centre is Dalhousie’s centre of expertise for student accessibility and accommodation. The advising team works with students who request accommodation as a result of a disability, religious obligation, or any barrier related to any other characteristic protected under Human Rights legislation (Canada and Nova Scotia).\\ Information: 2.11.4 Student Code of Conduct Everyone at Dalhousie is expected to treat others with dignity and respect. The Code of Student Conduct allows Dalhousie to take disciplinary action if students don’t follow this community expectation. When appropriate, violations of the code can be resolved in a reasonable and informal manner—perhaps through a restorative justice process. If an informal resolution can’t be reached, or would be inappropriate, procedures exist for formal dispute resolution. \\ Code: 2.11.5 Diversity and Inclusion - Culture of Respect Every person at Dalhousie has a right to be respected and safe. We believe inclusiveness is fundamental to education. We stand for equality. Dalhousie is strengthened in our diversity. We are a respectful and inclusive community. We are committed to being a place where everyone feels welcome and supported, which is why our Strategic Direction prioritizes fostering a culture of diversity and inclusiveness.\\ Statement: 2.11.6 Recognition of Mi’kmaq Territory Dalhousie University would like to acknowledge that the University is on Traditional Mi’kmaq Territory. The Elders in Residence program provides students with access to First Nations elders for guidance, counsel and support. Visit or e-mail the Indigenous Student Centre (1321 Edward St) (elders@dal.ca). Information: \\ 2.11.7 Important Dates in the Academic Year (including add/drop dates) https://www.dal.ca/academics/important_dates.html 2.11.8 University Grading Practices https://www.dal.ca/dept/university_secretariat/policies/academic/grading-practices-policy.html 2.11.9 Student Resources and Support 2.11.9.1 Advising General Advising, Science Program Advisors, Indigenous Student Centre, Black Advising Centre, International Centre 2.11.9.2 Academic supports Library, Writing Centre, Studying for Success, Copyright Office, Fair Dealing Guidelines 2.11.9.3 Other supports and services Student Health &amp; Wellness Centre, Student Advocacy, Ombudsperson 2.11.9.4 Safety: Biosafety, Chemical Safety, Radiation Safety, Scent‐Free Program "],["detailed-outline.html", "Chapter 3 Detailed outline 3.1 Course Overview - objectives and sample skills (computing, data) 3.2 look at data. socviz ch 1 3.3 why tools: ggplot, dplyr, markdown, git; R ties them together 3.4 The grammar of graphics 3.5 Tidy data 3.6 Another run at this plan 3.7 notes", " Chapter 3 Detailed outline Synchronous sessions on Tuesday and Thursday starting at 8:35 and ending by 9:55 (or possibly earlier.) Important dates Wed 6 Jan: Term begins Fri 5 Feb: Munro day, University closed 15-19 Feb: Study break Fri 12 March: Project proposal due Fri 2 Apr: Good Friday, University closed Tue 6 Apr: Last Tuesday/Thursday class Thu 8 Apr: Last day of classes Fri 9 Apr: Final project due 10-23 Apr: Exam period 3.1 Course Overview - objectives and sample skills (computing, data) 3.2 look at data. socviz ch 1 3.3 why tools: ggplot, dplyr, markdown, git; R ties them together 02 Introduction to R, Rstudio, add-on packages 02a get started. socviz ch 2 3.4 The grammar of graphics 03 ggplot graphs 03a make a plot. socviz ch 3 3.5 Tidy data 04 dplyr summaries 05 shape color lines 05a show the right numbers. socviz ch 4 05b graph tables, add labels, make notes. socviz. ch 5 10 Version control getting help from R and online plotting small multiples (facets) reading data (csv, tsv, xlsx); import menu item; r commands a bit more about R. socviz. Appendix A all sections data validation (pointblank) tidy data making data tidy (datapasta) annotations 30 graphics output (PDF, png, sizes, colors, themes; ragg) repurposing graphics for different media and purposes 31 dbplyr and sqlite (brief) graphs for categorical data graphs for quantitative data maps and chloropleths heatmaps draw maps. socviz. ch 7 linear models (lines, polynomials, robust, quantile); equationomatic loess, GAM kmeans MDS (?) work with models. socviz ch 6 themes, etc refine your plots. socviz ch 8 3.6 Another run at this plan Lecture titles (13) Introduction to Data Visualization Reproducibility and report writing The grammar of graphics and components of a ggplot Tracking changes and sharing data and code with git A tour of plot types Aesthetic features of graphs: symbols, lines, colours, and more Organizing data Summarizing data in tables Smoothing data Making clusters from quantitive data Comparing data: overlapping points and panel plots Learning computing tools on your own (project overview) Principal component analysis and Multidimensional scaling Lab titles (18) Getting R and Rstudio working in the cloud and on your computer Orientation to Rstudio and R markdown documents Your first ggplot Customizing ggplots Getting help with R Fixing R mistakes Getting data into R and tidying it Pivoting data Getting started with git More git practice Working with dates Linear regression and data smoothers Clustering Graphics formats - aesthetics and computer technialities Summarizing data with dplyr Using facetting Annotating plots and highlighting data PCA and MDS Appendix (5 + more added during term) What is the tidyverse? Contrast with other conventions How do I know I’ve done it right? Functions and types of data in R Text data and regular expressions introduction Examples of building up figures step by step Evaluation video overview and help Making a knitted document to describe somethign Making a video presentation 3.7 notes ghclass package for teaching with github github workshop for teaching https://mine-cetinkaya-rundel.github.io/teach-r-online/ sugrrants package for visualizing course components "],["evaluation-2.html", "Chapter 4 Evaluation 4.1 Tasks 4.2 Lesson 4", " Chapter 4 Evaluation 4.1 Tasks Tasks for each lesson are described here. Each task is designed to demonstrate a particular skill or idea from the lesson or prepare for the next lesson. Tasks will be evaluated on a 0-2 scale. The primary goal of each task is to perform the task, so the assessment will be 2 if the work is complete or mostly complete, 0 if the work is mostly incomplete, and 1 for roughly half complete tasks. 4.1.1 Lesson 1 Find two data visualizations that you find informative, compelling, or in need of improvement. Create a document that shows each visualization (the figure, or a snapshot of a dynamic visualization), provides the source (e.g., url and publication details if applicable). In a few sentences describe 1. the data behind the visualization, 2. main message conveyed by the visualization, 3. one or two features of the visualization that make it effective or suggestions for improvement. The goal of this project isn’t to be right or wrong, but rather to start the process of looking at data visualizations through the perspective of creator, designer, and critic. Submit your work as a single PDF on Brightspace. 4.1.2 Lesson 2 Install R, Rstudio, and the packages identified in Healy, Chapter 1. Login to rstudio.cloud which can be used if you have trouble using R on your own computer. Create github account. Answer the quiz on Brightspace which will ask if you were successful with each task or if you need help. Provide your github name. Ask for help with any of these tasks if you need it. 4.1.3 Lesson 3 Make a simple ggplot in an Rmd. Knit the R markdown file. Nothing to submit. 4.2 Lesson 4 Check out a github repository from online course. Add a plot to the Rmd document you find there. Commit your changes and push the Rmd file back to github. 4.2.1 Lesson 5 Demonstrate use of group_by, filter, summarize. R basics: c, str, class, typeof Demonstrate facetted plots in a few ways. Figure formatting. Axis labels. Legends. Colour scales. Work with dates using lubridate. Parsing, manipulating, plotting. Learn to use a function from its help page. Learn about a dataset from its help page. Report in a Rmd document. Learn somethign about dplyr from r4ds book. Demonstrate by solving an exercise. Learn somethign from ggplot2 tidyverse website. Demonstrate. Give a menu of 2-3 tasks. Demonstrate pivot longer and pivot wider. Fix mistakes in code provided. (about 5 kinds of mistakes / error messages.) Do a tidy tuesday. as Rmd Do a tidy tuesday as slideshow. Make a Rmd slideshow to demonstrate creation of a figure and revision / elaboration. 5 slides. Make 3 versions of same figure: Rmd version (webpage), pdf for printed page (b&amp;w), slideshow (png, big fonts, simplify, extra colour) Format a nice table using gt, kableExtra, etc Demo one of the following packages: Upset, patchwork, ggrepel demo one of the following: naniar, waldo, skimr Draw a simple map. (points on a map) Draw a more elaborate map. (colour scales, filled regions) Sample knn calculation. Sample PCA. "],["assignments.html", "Chapter 5 Assignments", " Chapter 5 Assignments 5.0.1 Overview Assignments are opportunities to apply and combine the skills from several lessons. They are both structured, in that you are asked to use specific skills to accomplish a task, and creative in that you have some flexibility in the product you produce. You will be assessed on your use of technical skills and your judgement in making well-designed and effective visualizations, following the principles explored in the course. Assignments should be submitted to the relevant github repository, generally as an R markdown document. Assesment rubric: * 0 none of the objectives met; document has errors that prevent knitting * 1 some objectives met * 2 some objectives met * 3 no substantive errors * 4 excellent work, clearly presented and thoughtfully designed 5.0.2 Assignment 1 learn, describe, and use a ggplot extension. 5% (Week 7, after break) - ggrepel, cowplot, patchwork, viridislite 5.0.3 Assignment learn, describe, and use a table layout package. 5% (Week 9) - DT, gt, flextable, kable/kableExtra (Do one as a 5 minute video with script and slides. Do the other as a rmd tutorial.) 5.0.4 Assignment Mini-project: Tidy Tuesday 1. 5% (Week 10) 5.0.5 Assignment Mini-project: Tidy Tuesday 2. 5% (Week 11) "],["term-project.html", "Chapter 6 Term project", " Chapter 6 Term project Your final project is an analysis on a dataset of your own choosing. You can choose the data based on your interests or based on work in other courses or research projects. You should demonstrate many of the techniques from the course, applying them as appropriate to develop and communicate insight into the data. You should create compelling visualizations of your data. Pay attention to your presentation: neatness, coherency, and clarity will count. All analyses must be done in RStudio, using R. Deliverables Proposal - due Fiday 12 March at 6:00 pm Presentation - due Friday 2 April at 6:00 pm as pre-recorded video or live presentation in class on March 30 or April 1. Report - due Friday 9 April at 6:00 pm Work in pairs. You can produce team products, or one product per team member, whichever you prefer. Use a single github repository for the proposal, presentation, and final report. If you work in pairs, producing joint work, use the repository for one team member and add the other member to the repository. 6.0.1 Proposal Your main task for the proposal is to find a dataset to analyze for your project and describe at least one question you can address with data visualizations. It is important that you choose a readily accessible dataset that is large enough so multiple relationships can be explored, but no so complex that you get lost. I suggest your dataset should have at least 50 observations and about 10 variables. The variables should include categorical variables, discrete numerical variables, and continuous numerical variables. If you plan to use a dataset that comes in a format that we haven’t encountered in class, make sure that you are able to load it into R as this can be tricky depending on the source. If you are having trouble ask for help before it is too late. Do not reuse datasets from any part of the course. Here is list of data repositories containing many interesting datasets. Feel free to use data from other sources if you prefer. TidyTuesday Kaggle datasets OpenIntro datasets Awesome public datasets Bikeshare data portal Harvard Dataverse Statistics Canada Open government data: Canada, NS, and many other sources Other sources listed in the Data sources section of these notes or that you find on your own. Describe a dataset and question you can address with the data for your report. How you plan to use 5 things (overview plot, dplyr/table summary, small multiples, knn/PCA, map) Your proposal should include an Rmd document with the following sections and the proposed dataset. Introduction: The introduction should introduce your general research question and your data (where it came from, how it was collected, what are the cases, what are the variables, etc.). Data: Place your data in the /data folder, and add dimensions and codebook to the README in that folder. Include the output of dplyr::glimpse() or skimr::skim() on your data frame. Visualization and analysis plan: The outcome (response, Y) and predictor (explanatory, X) variables you will use to answer your question. Ideas for at least two possible visualizations for exploratory data analysis, including some summary statistics and visualizations, along with some explanation on how they help you learn more about your data. An idea of how at least one statistical methods described in the course (smoothing, PCA, k-means) could be useful in analyzing your data Assessment. Your proposal will be assessed for the following elements: a dataset is identifed and described (size of dataset, variables, source), a question to be investigated is clearly described, a visualization plan is presented. Scoring will be similar to exercises: 4 points (1 each) for the following 4 elements: description of data, size of data, source of data, question, 2 points for a visualization plan 2 points for presentation quality, 2 points for creativity / thoughtfulness / imagination Total 10. 6.0.2 Oral presentation The oral presentation should be 3-5 minutes long. The goal is to present the highlights of your project and allow for feedback which can be incorporated as you revise your written report. You should have a small number of slides to accompany your presentation. I suggest a format such as the following: A title with your name A description of the data you are analyzing At least one question you can investigate with your data visualization At least two data visualizations A conclusion A template for a presentation is in the project repository. Don’t show your R code; the focus should be on your results and visualzations not your computing. Set echo = FALSE to hide R code (this is already done in the template). Your presentation should not just be an account of everything you tried (“then we did this, then we did this, etc.”), instead it should convey what choices you made, and why, and what you found. 6.0.3 Written report Presentation schedule: Presentations will take place during the last workshop of the semester. You can choose to do your presentation live or pre-record it. During your workshop you will watch presentations from other teams in your workshop and provide feedback in the form of peer evaluations. The presentation line-up will be generated randomly. Write-up Along with your presentation slides, we want you to provide a brief summary of your project in the README of your repository. This write-up, which you can also think of as an summary of your project, should provide information on the dataset you’re using, your research question(s), your methodology, and your findings. Repo organization The following folders and files in your project repository: presentation.Rmd + presentation.html: Your presentation slides README.md: Your write-up /data/*: Your dataset in csv or RDS format, in the /data folder. /proposal: Your proposal from earlier in the semester Style and format does count for this assignment, so please take the time to make sure everything looks good and your data and code are properly formated. You’re working in the same repo as your teammate, so merge conflicts will happen, issues will arise, and that’s fine! Commit and push often, and ask questions when stuck. Review the marking guidelines below and ask questions if any of the expectations are unclear. Code: In your presentation your code should be hidden (echo = FALSE) so that your document is neat and easy to read. However your document should include all your code such that if I re-knit your R Markdown file I should be able to obtain the results you presented. Exception: If you want to highlight something specific about a piece of code, you’re welcomed to show that portion. Marking Total 100 pts Proposal 10 pts Presentation 50 pts Write-up 15 pts Reproducibility and organization 10 pts Team peer evaluation 10 pts Classmates’ evaluation 5 pts Criteria Content - What is the quality of research and/or policy question and relevancy of data to those questions? Correctness - Are statistical procedures carried out and explained correctly? Writing and Presentation - What is the quality of the statistical presentation, writing, and explanations? Creativity and Critical Thought - Is the project carefully thought out? Are the limitations carefully considered? Does it appear that time and effort went into the planning and implementation of the project? "],["ethical-considerations.html", "Chapter 7 Ethical considerations", " Chapter 7 Ethical considerations Readings and resources for ethics in data science Case studies COVID dashboards Data science ethics checklist Misc https://www.datascience-pm.com/10-data-science-ethics-questions/ https://towardsdatascience.com/the-ethics-of-data-science-e3b1828affa2 https://www.loyola.edu/academics/data-science/blog/2018/why-ethics-are-important-in-data-science British actuaries "],["lesson-1-invitation-to-data-visualization.html", "Chapter 8 Lesson 1 Invitation to Data Visualization 8.1 Stories", " Chapter 8 Lesson 1 Invitation to Data Visualization Good data visualizations CO2 Gapminder animated Weatherspark Env Canada dashboard Recreate graphs step by step Ideas Grammar of graphics. For reading and for creating Use of element. Length slope shape dot colour box plot histogram Organize and reshape data Tell a story No such thing as a neutral observer Colour challenges 8.0.1 Classics of data visualization Historical Napoleon army map. Florence Nightengale’s causes of death. John Snow’s cholera map. Modern Hans Rosling’s TED talk on gapminder data Temperature and CO2 data over 800k years and the hockey stick (Michael Mann, Al Gore) Graphics from the NYT. https://www.nytimes.com/column/whats-going-on-in-this-graph e.g., https://www.nytimes.com/2018/01/04/learning/whats-going-on-in-this-graph-jan-9-2018.html 8.1 Stories https://www.openculture.com/2014/02/kurt-vonnegut-masters-thesis-rejected-by-u-chicago.html COWilke chapter "],["lesson-2-computer-tools.html", "Chapter 9 Lesson 2 Computer tools 9.1 Rstudio 9.2 ggplot2 9.3 tidyverse 9.4 R Markdown 9.5 Git 9.6 Github 9.7 Tasks 9.8 Resources", " Chapter 9 Lesson 2 Computer tools We will use R and Rstudio in this course. R is widely used to analyze data and comes with many add-on packages for statistical analysis, data visualization, and specialized tools for many disciplines and applications. We will just scratch the surface of what R can do, but by the end of the course you should feel comfortable learning to use R for data visulization and you will have the skills to learn how to use R for many other tasks. Rstudio is a graphical user interface for R with many convenient features including tools to support report writing, getting help, and project management. For data visualization we will use ‘ggplot2’, for data analysis we will use the ‘tidyverse’ style of programming, for report writing we will use ‘R markdown’, and for project management we will use R projects and ‘git’ version control. All of these computer terms will mean much more to you later on in the course! In this lesson I will explain why we use each of these tools and the main features that make each useful. Your task for this lesson is to get your computer set up with the necessary software so that you are ready for the rest of the course. 9.0.1 R R is open-source software developed by a core team of programmers, which is made available for free to all users along with the full ‘source code’ for the software so that any one can find out exactly how any part of the software works. R was first developed in the mid-1990s and is now a quite mature language, although new developments still occur. For example a brand new notation was just introduced in December 2020. R was developed after a couple decades of experience with its predecessor S and a commercial product known as S+. R has many strengths that account for its popularity and longevity. It is a very flexible and expressive language, which allows for many styles of programming and the use of both powerful tools to perform sophisticated analyses easily and also the flexibility to develop your own computational tools from basic computations. There is a huge, global community of users who continually develop new tools for R and make them available and easy to install on your computer. This means that anyone can develop a new data analysis method and readily distribute it on a widely-used platform to anyone very easily. This is tremendously powerful! A third key ingredient is a very helpful community of users who develop tutorials and books to help newcomers to R learn to use it. Our course will use three such books, which can be purchased, but are also available for free on the internet. On the other hand, R is a challenging tool to learn. To accomplish any task you must type instructions into the computer. This can be daunting as you must first learn what instructions are available, what they do, and how to use them. If you have had experience with programming before (for example using Python or Java) you will know that there are many ways to go wrong and the computer’s output is not always easy to understand, especially when things go wrong! Nevertheless, the R style of computing with data, once you have been initiated, allows for endless possibilities in terms of data analysis. Our approach in this course will be to demostrate a few sample calculations and computing tasks in each lesson and encourage you to become profecient in these tasks through repetition and minor modifications. Over time, you will come to understand both how to use the tools to analyze and visualize data and how to interact with R to accomplish new tasks. 9.1 Rstudio Rstudio is a graphical ‘front end’ (or integrated development environment) to the R software. It provides an editor for documents, a convenient way to see plots, get help, explore data objects created with R, manage report writing, and sets of files used collectively as part of projects. As with R, you will find that Rstudio has many features that will take you a while to discover. In this course we will focus on a few features and leave you to find discover others on your own. 9.2 ggplot2 Since this is a course in data visualization, creating plots from data is a core skill. To get a computer to make a graph, you need to bring data together with instructions for producing the graph. Traditional ways to make graphs have been idiosyncratic, with each kind of graph having its own specialized instructions, even for features common to many plots such as the use of size adjustments, symbols, or colors to represent numerical or categorical scales. The ‘ggplot’ style arose out of a recognition that having a language (or ‘grammar’) to describe graphical displays of data was superior to other styles of graphics creation. (The gg in ggplot is an abbreviation for the grammar of graphics.) A common language is used to connect variables in your dataset to aesthetic features in your plot, such as position along an axis, symbol size, shape, or colour. This association is separate from selecting how the data are to be represented (e.g., as points, a line, a histogram). Another key element is how ranges of values are associated to sizes, shapes, and colours; these are called scales and they too have their own functions, which work regardless of the type of plot being made. Finally, annotations such as axis labels, and formatting of other elements (e.g., fonts, sizes, positions of non-data elements) may be adjusted to customize a plot. Essentially ggplot provides a tool for making graphs which is modular, and thus allows you to quickly and efficiently learn to make new kinds of plots and modify them. The proof that this works is that since ggplot2 was first developed, many users of the software have contributed their own styles of plotting which can be incorporated into the design of the original software. All this makes plotting data sound complicated, but in fact making a simple plot with few customizations is actually very easy once you get the idea behind the grammar of graphics. 9.3 tidyverse The starting point for each visualization we will produce and each analysis we will do, is data. The developers of the tidyverse set of tools in R noticed that we all do many of the same kinds of operations to our data and that a few style suggestions about how to organize your data and how to analyze data can provide both great flexibility and simplify common tasks. There is nothing that can be done with the tidyverse that I couldn’t figure out how to do before these tools were developed, but the R code I write now is much easier for me and others to read, and the problem solving process I use is much more streamlined than it was before since I tend to use the same kinds of solutions for each new dataset I examine. There are two central ideas in the tidyverse approach to data analysis: data should be arranged in rectangles with variables in columns and observations in rows, and a data analysis calculation should be broken down into a series of simple, modular functions that are composed together, such as filtering rows, grouping rows together, and computing summaries. Essentially this forms a grammar of data analysis, analogous to what ggplot did for plotting graphics. 9.4 R Markdown Once you know how to produce a data visualization or statisical analysis, new challenges quickly arrive. You must communicate these results to someone else. You must be prepared to revise your analysis and repeat it on revised or new data. A common approach is write lots of little bits of computer code, cut and paste the results into a word processor, and try to remember how it all fits together. R markdown documents are key step in a better solution. An R markdown document contains both natural-langauge (e.g., English) text for humans to read and R code for the computer to use. The R markdown document can be compiled (we will say ‘knitted’) together with the results of R computations to provide a finished report. This enables the computer code and data analysis results to be kept together with the exposition about the data and results. 9.5 Git 9.6 Github 9.7 Tasks See the task for lesson 2. 9.8 Resources If you want to know a lot more about using Rstudio, here is an hour-long video overview of Rstudio features "],["what-is-version-control-software.html", "Chapter 10 What is version control software? 10.1 What software is used for version control? 10.2 Why is version control used in data visualization? 10.3 How will we use version control? 10.4 Introduction to git 10.5 Using git with Rstudio 10.6 Using github with Rstudio 10.7 Resources", " Chapter 10 What is version control software? Version control software is used to manage the process of creating software. It is commonly used to track changes, manage the revision process of correcting errors and adding new features, tracking the history of a project through different versions, synchronizing contributions from many different people, and faciliating the distribution to a broad audience. Version control software is most commonly applied to the production of complex projects like software, but it can be used for text documents, data, and many other applications. 10.1 What software is used for version control? Version control software has a history dating back several decades, so there are many different tools available. We will be using one of the most popular packages, known as git (Wikipedia, homepage). Git keeps the entire history of a project on your own computer and does not require any central repository. Since version control software is often used to coordinate the work of many authors and to distribute the product, central repositories such as GitHub (Wikipedia, homepage) have become very popular, to the point that some people see them as an integrated set of tools. Other popular version control software packages include Mercurial and Subversion and central repositories such as bitbucket and more. We will be using git and github in this book. Rstudio works well with Mercurial as well. 10.2 Why is version control used in data visualization? Data visualization is the process of combining data with computer code to create a visualization. Both of these parts can change with new information and new ideas, can require synthesis of skills from multiple authors, and benefit from transparency in design and distribution. As a result, version control software is a natural tool to help with the work of data visualization. Suppose you develop a data visualization and you want to distribute the result, but you anticipate updating the data and revising the analyses. This sequence of steps is very similar to software development: an initial version is produced and released to users, changes are made, new versions are produced. Users (of software and data visulizations) want to know what version they are using, if there are any updates, and what the changes were between the versions. Version control software can help with these tasks and, once the key concepts are understood, without much extra effort on the part of the team producing the data visualization. Just as software can be developed without version control software, so can data visualizations. In this course we will integrate just enough use of version control to help you see how it can be helpful and to get you past the uncomfortable stage of knowing what it is without knowing the basics of how to use it. 10.3 How will we use version control? We will use git and github to submit and assess assignments and to mediate cooperative work. Specifically, the following assignments will require the use of git and github: Introduction to git and github Tutorial for a new data visualization tool Sample data visualization development Final project 10.4 Introduction to git Key concepts 10.5 Using git with Rstudio Watch a video walkthrough of these steps (link) See the Rstudio help Setup 10.5.1 On a Macintosh (OSX) computer 10.5.2 On a Windows computer 10.5.3 Set up a github account Create account Link to my course as student Get authorization key onto your computer 10.5.4 Common steps for each assignment New project &gt; New Directory Provide directory name, indicate the subdirectory, make sure “create a git repository” is checked. Create an Rmd file. Save the file. Stage the file. Stage the other files created for you as well. Click commit to make your first commit. Write a descriptive message. Click commit and close the windows. Create new repository on github. Attach the project to your github account. Terminal window: git remote add upstream https://github.com/AndrewIrwin/git-assignment.git (upstream or origin?) git push –set-upstream origin master Go to github repository page to see your files are now there. Create a README file. Stage and commit. Push to github by pressing the green up arrow. May need to authorize use of github credentials by typing your computer login password. Look on github to see your files are there now. Clean up by deleting the folder from your computer and the repository from github. (Settings / scroll to bottom / Delete repository / Type name to confirm / Type github password to confirm.) 10.6 Using github with Rstudio 10.7 Resources Happy Git with R Advanced Git cheat sheet "],["ragg.html", "Chapter 11 ragg", " Chapter 11 ragg A note about making figures for different purposes. The ideas are general, but the link below has some specific comments for R. We make figures for many purposes: to view on our own computer monitors, for publication (ultimately as a PDF), to show on a projector in a room and on printed posters (at least, we will do the last two in the eventual post-pandemic world). All of these require figures to have different sizes because they are viewed from different distances. Many (most, all?) computer graphics have elements that don’t always scale the same way or should be scaled in different ways for these different uses. For example, the size of symbols on a graph and text on legends should generally be bigger relative to the overall size of the graph in a presentation than on a printed page. If you are looking at a figure you created on the computer screen in front of you, you may desire relatively smaller text and symbols. In addition to these important perceptual concerns, there are also (sometimes mysterious) computer concerns having to do with “raster graphics” (png figures) and “vector graphics” (typically PDF, but PDF can contain raster graphics too), and how symbols are drawn and sized and how text is drawn and sized. Even people who understand these issues well can get confused and frustrated by them. And most of us have gaps in our understanding. Here is a short description of some of these issues: https://www.tidyverse.org/blog/2020/08/taking-control-of-plot-scaling/ The take-away message is that if you want to save a graphic in R you can now use an option “scaling” to adjust the scale of the elements of the figure without changing the “physical” size of the image. This is described above for an easy way to save ggplot graphics: ggsave() with a new raster graphics output package (I just learned about it) called “ragg” and the function agg_png() which works like png() for creating raster graphics. e.g., library(ggplot2) library(ragg) p &lt;- ggplot( …) ggsave(“plot.png”, p, device= agg_png, width = 60, height = 36, units = “cm”, res = 300, scaling = 3) As always, if you are having trouble with R (saving graphics, creating graphics, etc), please ask! Andrew "],["summarizing-data.html", "Chapter 12 Summarizing data 12.1 Exercise", " Chapter 12 Summarizing data dplyr filter group_by mutate summarize slice count pivot_longer, wider 12.1 Exercise Learn to use three of the following functions, by reading dplyr tidyverse documentation or blog post. Show and explain 2 examples for each function. Show a simple and more complicated example. Overview * glimpse, slice Columns * relocate, select, separate, separate_rows Summarize * count, distinct, uncount factors fct_inorder fct_infreq ggplot geom_count ggridges ggrepel "],["lesson-k-nearest-neighbour-classification-and-regression.html", "Chapter 13 Lesson: K-Nearest Neighbour classification and regression 13.1 Introduction 13.2 Example 13.3 How to use it 13.4 Sources", " Chapter 13 Lesson: K-Nearest Neighbour classification and regression ## ── Attaching packages ────────────────────────────────────── tidymodels 0.1.2 ── ## ✓ broom 0.7.2 ✓ recipes 0.1.15 ## ✓ dials 0.0.9 ✓ rsample 0.0.8 ## ✓ infer 0.5.3 ✓ tune 0.1.2 ## ✓ modeldata 0.1.0 ✓ workflows 0.2.1 ## ✓ parsnip 0.1.4 ✓ yardstick 0.0.7 ## ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ── ## x scales::discard() masks purrr::discard() ## x dplyr::filter() masks stats::filter() ## x recipes::fixed() masks stringr::fixed() ## x dplyr::lag() masks stats::lag() ## x yardstick::spec() masks readr::spec() ## x recipes::step() masks stats::step() ## ## Attaching package: &#39;janitor&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## chisq.test, fisher.test 13.1 Introduction The k-nearest neighbours algorithm can be used to classify an observation or predict a response variable by combining observations of a set (of size \\(k\\)) of the nearest observations. The result is a very flexible method for prediction which incorprates information near a point. Changing the number of nearby neighbours used adjusts the amount of smoothing done, but if the observations are very unevenly spread out this can lead to surprising results. Similarly, prediction for points that are far from other data points suffers from some of the same problems as extrapolation and may have undesirable outcomes. 13.2 Example Let’s apply the method to a the Palmer Penguin data. I will use some measurements on the penguins to determine the species of a few observations. I’ve concealed the species identity of a few observations, labeled as “missing” in this plot. There are some missing values for sex, but I won’t use those in my model, so I’ll remove them. Now we make a model and try to predict the unknown species. penguins2 %&gt;% mutate(random = runif(n()), train = (random &gt; 0.25) &amp; (species2 != &quot;missing&quot;), test = (!train) ) -&gt; penguins2 penguin_recipe &lt;- recipe(species2 ~ bill_length_mm + flipper_length_mm, # + bill_depth_mm + body_mass_g, # add to improve model data = penguins2 ) %&gt;% step_scale(all_predictors()) %&gt;% step_center(all_predictors()) knn_specification &lt;- nearest_neighbor(mode = &quot;classification&quot;) # optional: neighbours = &lt;integer&gt; penguin_knn &lt;- workflow() %&gt;% add_recipe(penguin_recipe) %&gt;% add_model(knn_specification) %&gt;% fit(data = penguins2 %&gt;% filter(train)) ## Warning: Engine set to `kknn`. penguin_knn ## ══ Workflow [trained] ══════════════════════════════════════════════════════════ ## Preprocessor: Recipe ## Model: nearest_neighbor() ## ## ── Preprocessor ──────────────────────────────────────────────────────────────── ## 2 Recipe Steps ## ## ● step_scale() ## ● step_center() ## ## ── Model ─────────────────────────────────────────────────────────────────────── ## ## Call: ## kknn::train.kknn(formula = ..y ~ ., data = data, ks = min_rows(5, data, 5)) ## ## Type of response variable: nominal ## Minimal misclassification: 0.02845528 ## Best kernel: optimal ## Best k: 5 penguin_predicted &lt;- bind_cols(penguins2, predict(penguin_knn, penguins2 )) Compare the original values and the predicted values: we get a perfect recovery! penguin_predicted %&gt;% filter(species2 == &quot;missing&quot;) %&gt;% tabyl(species, .pred_class) ## species Adelie Chinstrap Gentoo missing ## Adelie 2 0 1 0 ## Chinstrap 2 3 0 0 ## Gentoo 0 0 2 0 penguin_predicted %&gt;% filter(test) %&gt;% tabyl(species, .pred_class) ## species Adelie Chinstrap Gentoo missing ## Adelie 39 1 1 0 ## Chinstrap 2 14 0 0 ## Gentoo 0 1 29 0 Plot the data, using larger symbols for misclassified data. penguin_predicted %&gt;% mutate(correct = species == .pred_class) %&gt;% ggplot(aes(x = bill_length_mm, y = flipper_length_mm, shape = species, size = train, color = correct)) + geom_point(alpha = 0.75) + scale_color_viridis_d(begin = 0.2, end = 0.8) + scale_size_manual(values = c(3, 2)) Now try regression. Predict bill_length from the other variables. penguins3 &lt;- penguins2 %&gt;% mutate(flipper_length_s = scale(flipper_length_mm), body_mass_s = scale(body_mass_g), bill_depth_s = scale(bill_depth_mm), bill_length_s = scale(bill_length_mm)) penguin_recipe2 &lt;- recipe(body_mass_g ~ bill_length_s + species + flipper_length_s + bill_depth_s, data = penguins3 ) knn_specification2 &lt;- nearest_neighbor(mode = &quot;regression&quot;) # optional: neighbours = &lt;integer&gt; penguin_knn2 &lt;- workflow() %&gt;% add_recipe(penguin_recipe2) %&gt;% add_model(knn_specification2) %&gt;% fit(data = penguins3 %&gt;% filter(train)) ## Warning: Engine set to `kknn`. penguin_knn2 ## ══ Workflow [trained] ══════════════════════════════════════════════════════════ ## Preprocessor: Recipe ## Model: nearest_neighbor() ## ## ── Preprocessor ──────────────────────────────────────────────────────────────── ## 0 Recipe Steps ## ## ── Model ─────────────────────────────────────────────────────────────────────── ## ## Call: ## kknn::train.kknn(formula = ..y ~ ., data = data, ks = min_rows(5, data, 5)) ## ## Type of response variable: continuous ## minimal mean absolute error: 294.8206 ## Minimal mean squared error: 142846.4 ## Best kernel: optimal ## Best k: 5 penguin_predicted &lt;- bind_cols(penguins3, predict(penguin_knn2, new_data = penguins3 )) penguin_predicted %&gt;% ggplot(aes(x = body_mass_g, y = .pred, color = species, shape = train)) + geom_point() + geom_abline() Compare to linear regression. Rank deficient since there is an intercept and an estimate for each species. Not clear how to suppress the intercept. linear_specification2 &lt;- linear_reg(mode = &quot;regression&quot;) # optional: neighbours = &lt;integer&gt; penguin_linear &lt;- workflow() %&gt;% add_recipe(penguin_recipe2) %&gt;% add_model(linear_specification2) %&gt;% fit(data = penguins3 %&gt;% filter(train)) ## Warning: Engine set to `lm`. penguin_linear ## ══ Workflow [trained] ══════════════════════════════════════════════════════════ ## Preprocessor: Recipe ## Model: linear_reg() ## ## ── Preprocessor ──────────────────────────────────────────────────────────────── ## 0 Recipe Steps ## ## ── Model ─────────────────────────────────────────────────────────────────────── ## ## Call: ## stats::lm(formula = ..y ~ ., data = data) ## ## Coefficients: ## (Intercept) bill_length_s speciesChinstrap speciesGentoo ## 3988.0 211.8 -534.5 930.3 ## flipper_length_s bill_depth_s ## 313.4 281.5 penguin_predicted &lt;- bind_cols(penguins3, predict(penguin_linear, new_data = penguins3 )) penguin_predicted %&gt;% ggplot(aes(x = body_mass_g, y = .pred, color = species, shape = train)) + geom_point() + geom_abline() What does it do? Picture Classification Regression Local method Weighting by distance 13.3 How to use it Requires pairs predictors, classification/value Assigns classification or value to new points based on nearby points Nonparametric Standardize datasets Can use any distance metric Can be Slow on large datasets Use PCA for dimension reduction if large number of correlated predictors Test/train Confusion matrix Determining k by optimization Good problems Penguins Diamonds dataset? Cars dataset? Packages Caret Mlr Tidymodels / parsnip 13.4 Sources Wikipedia page UBC data science course on knn classification and regression Tidymodels documentation for knn "],["making-maps.html", "Chapter 14 Making maps", " Chapter 14 Making maps Maps of Canada Hidden lecture where I prepare data and write functions https://tengl.net/blog/2020/1/7/drawing-canada-maps-in-r get province and census division shape files from stats canada https://www12.statcan.gc.ca/census-recensement/2011/geo/bound-limit/bound-limit-s-eng.cfm?year=19 Election data and bounaries and chloropleths and populated weighted chloropleths https://cran.r-project.org/web/packages/mapcan/readme/README.html Wind turbines in Maritimes https://discuss.ropensci.org/t/osmdata-rnaturalearth-and-magick-for-tidytuesday/2255 Set of a bunch of maps https://github.com/AlexandraKapp/30daymapchallenge "],["pca.html", "Chapter 15 PCA", " Chapter 15 PCA https://melinaluethje.com/2020/11/12/multivariate-ordinations-101/ "],["using-colour-well.html", "Chapter 16 Using colour well 16.1 When to use colour in your graphics 16.2 Advice for picking colour palettes 16.3 Colour vision deficiency", " Chapter 16 Using colour well 16.1 When to use colour in your graphics To highlight information already distinguished in some other way To distinguish a small number of categories (2-5) As a semi-quantitative scale, particularly if only a few hues are used (e.g., red and blue) in varying degrees of brightness or saturation Avoid using more than 5 colours It is hard to make quantitative comparisons between two colours 16.2 Advice for picking colour palettes 16.3 Colour vision deficiency Awareness page https://www.colourblindawareness.org/colour-blindness/ NIH statistics and other data https://ghr.nlm.nih.gov/condition/color-vision-deficiency Wikipedia https://en.wikipedia.org/wiki/Color_blindness Simulate what yuor ggplot looks like to someone with colour vision deficiency https://github.com/clauswilke/colorblindr "],["data-sources.html", "Chapter 17 Data sources 17.1 built-in and exisiting packages 17.2 websites 17.3 student project 17.4 distribution of data 17.5 Canadian COVID data", " Chapter 17 Data sources 17.1 built-in and exisiting packages datasets palmerpenguins gapminder (but see website too Gapminder ) 17.2 websites Our World In Data a curated set of over 3000 charts with documentation and open source data. One person’s collection of data of various sources 17.3 student project find a dataset document it here 17.4 distribution of data FAIR 17.5 Canadian COVID data Federal, BC, AB, SK, MB, ON, QC, NB, PE, NS, "],["staying-organized.html", "Chapter 18 Staying organized 18.1 Projects 18.2 Files and Folders 18.3 Naming conventions 18.4 Resources", " Chapter 18 Staying organized When you first start learning a computing tool like R, most people just put their files in “Downloads” or “Documents” or even on the “Desktop” with no particular thought to names or organization. This is fine when you are first experimenting, but it quickly gets out of control, especially when you want to keep one project separate from another, add data files, or want to share files with a collaborator. Here are some suggestions to help you get and stay organized. 18.1 Projects Whenever I start a new project, I create a new folder. When I open R, instead of creating a new R markdown file right away, I first start a new project (File &gt; New Project…). This new project can be in this new folder (directory) or you can create a new folder. You can choose to start using version control with the project. I suggest you do! Version control on your local machine takes very little extra effort and can be really handy if (when!) you delete something you didn’t mean to, or decide to undo a whole bunch of changes that didn’t work out the way you hoped. This works on your own computer – no need to use github. A project encourages you keep all your files together in the same place. Rstudio will remember which files were open when you quit and re-open them for you. It makes the process of switching from one project to another much easier. You can have two different Rstudio sessions open in different windows at the same time, but I suggest you don’t open files from other projects in a project window; that works against your effort to stay organized. 18.2 Files and Folders You can put all your files in this project in this one folder, but if you have different kinds of files – R markdown documents, data files, figures, and presentations, it can help you stay organized to create a sub-folder for each type of file. I find it particularly useful to do this for two kinds of files. Any file I get from somewhere else, typically a data file from a collaborator or the internet, goes in its own folder (“data”) and I never modify these files. That way I can clean up copies of a file and always know what the original file looked like. This is not really necessary if you use version control, but the original data file is the most likely file I’ll want to use again and I think the duplication is worth the effort. Second, any files that are created by my R code: figures, data tables, or the results of time-consuming calculations, for example, because I know they can always be deleted and recreated later on. Putting them in their own folder reminds me I don’t need to use version control on them; my code created them and there is no need to keep the results. 18.3 Naming conventions It’s helpful to create informative names for files. If two files are related, use similar names with a different suffix (world-map.R and world-map.png, for example). If some steps need to be performed in a particular order, a simple way is to use a number (01, 02, etc) as a prefix. I used this convention when writing these notes to help me keep the sections in order. For advanced projects, there are specialty tools (e.g., drake) for performing calculations in a particular order, but a simple numbering scheme works for many projects that ourgrow simple sequencing of calculations in a single file. 18.4 Resources R for Data Science notes on scripts and projects Drake package and manual If you are worried about versions of packages changing, you can keep track of the packages you used and their versions using checkpoint or packrat "],["asking-questions-and-getting-help.html", "Chapter 19 Asking questions and getting help 19.1 Suggestions for asking questions 19.2 How to learn material in this course 19.3 Getting help", " Chapter 19 Asking questions and getting help When you are learning a new subject or skill, you will have a lot of questions. Detailed questions about a particular skill. General questions about a topic. Big-picture questions about how to apply the material. Regardless of the question, asking questions well is a superpower. Why? A question is a way of crystallizing the uncertainty in your mind about a specific topic. The more specific your question, the easier it is to answer, and the more likely it is that the response will be helpful to you. Sometimes simply asking a question will lead you to the steps to answer the question for yourself. In fact, asking questions of yourself is an important part of learning and thinking. Asking good questions can be challenging, especially in asynchronous learning. In a classroom, it’s fairly easy: Can you give another example? Why did you do that calculation? What does the answer mean? Many questions you might ask in an in-person class don’t translate well to other contexts: email, office hours, or online forums, because the immediate context of a class is missing. So it’s up to you to add that context when you ask a question. In the suggestions below, I am imagining your are preparing a question to help you learn a concept or skill in a course. You could be asking your instructor, a classmate, or even yourself. It’s important to ask questions – and I want you to ask questions, so much that you should consider it part of your assigned work to formulate questions. 19.1 Suggestions for asking questions A few suggestions: Explain the context (is this about material from a video, the course notes, an assignment – which one?, or just something that you are wondering about) Say what you know (the topic is X, or the question asks for Y) Say what you are trying to do (understand an argument, perform a calculation, fix an error in code) Say what you think comes next or where you think you are stuck (I’m trying to figure out X, I don’t know why the plot looks like Y) 19.2 How to learn material in this course Levels of the course - required outcomes Learning technical skills well enough so that you can use them again https://jvns.ca/blog/2018/09/01/learning-skills-you-can-practice/ 19.3 Getting help R studio tips presented as animated GIFs "],["extra-resources.html", "Chapter 20 Extra resources 20.1 Courses 20.2 Books 20.3 Cheatsheets 20.4 General resources (not just R) 20.5 Websites pointing to other websites: 20.6 Videos 20.7 Other", " Chapter 20 Extra resources 20.1 Courses Introduction to Data Science at University of Edinburg by Mine Çetinkaya-Rundel Web page for Kieran Healy’s Data visualization course Stat 545 20.2 Books Grammar of Graphics ggplot2 book R Graphics Cookbook R for Data Science Exercise solutions Bookdown manual for writing longer documents with R Markdown 20.3 Cheatsheets Hosted at Rstudio RStudio R Markdown ggplot2 dplyr R markdown lessons Using git with R (more than the basics) Data Science in a Box by Mine Çetinkaya-Rundel 20.4 General resources (not just R) https://datavizcatalogue.com/index.html 20.5 Websites pointing to other websites: Learn R for free: learnR4free.com 20.6 Videos Hour-long video overview of Rstudio features: https://www.youtube.com/watch?v=PXiY8muVUec 20.7 Other A story about starting to work as a data scientist and writing a book about becoming a data scientist. "],["tmi-about-r.html", "Chapter 21 TMI about R", " Chapter 21 TMI about R Too much information about R: I want to know but I don’t want to ask. Important information that de-mystifies r. Mental model of why it works thus way. A series of q and a about r. Not tested or part of The course. Computer software is full of technical details. Too little understanding and you just get confused and make up rules for yourself. Too much detail and you don’t know why it matters so you get bored and disengaged. Course approach is a just in fine and just enough information. These videos tell you a little bit more. What is a data frame? Or tibble. Or data table? What is the difference between strings and factors? What’s the pipe? Why does ggplot use +? What are packages? What’s the difference between installing one and using one? Why is r organized thus way? Too many equals signs. = == &lt;- all.equal. Waldo package. NA nan inf -inf Testing for Na. Replacing. If then functions. What’s a function? What’s a formula? Lm facet also t.test gam Grammar? Gg gt Descriptive vs imperative SQL as another example —- Cure videos How to get help from the Internet? How to ask a question? How to answer a question? How to fix an error in your code? How to learn from examples. Start with rmd and rpres templates How to get data into R "],["computing-notes.html", "Chapter 22 Computing notes", " Chapter 22 Computing notes There are thousands of different programming languages. Why? Partly different ideas have arisen over time. Sometimes, languages have been created for particular problems. But most often, languages are created to enable a new kind of interaction between programmer and computer. Over time, as computing power increases and the kinds of problems solved by computer change, new opportunities and new needs arise and new languages are developed. What are some of the constraints and trade-offs when using a computer? The three most important are * the amount of storage required to solve a problem, * the number of computations to solve a problem, and * the amount of human time required to design and implement a solution. Many programming languages prioritize the first two. The trade-off between the first two is a classic idea in computer science. You can see how it arises from a simple example. Suppose you know you need the approximate result of some complex mathematical computation. You can either perform the calcuation when you need it (which takes time), or you can compute a table of possible computations in advance (which takes storage) and lookup the result when you need it. This is the idea behind statistical tables in the back of statistics textbooks – the calculations are hard, but a good enough table fits on a page or two. The designers of the R language and packages often prioritize minimizing the amount of time required for a human to design and code the solution to a problem. To do this well, the designers needed to give you flexible and powerful tools (functions). The flexibility of the functions means that they are not always optimized to use the least storage or time. Powerful tools require significant study to learn how to use them effectively. The examples in this course are selected to convince you that that investment is worth your time. There are also many specialized packages of functions, each created to make a certain type of problem easier or faster to solve. This is now a feature of all programming domains, which have specialized tools for different operating systems, the web, or particular problem domains like databases, machine learningm or statistical data analysis. Each of these requires effort to learn, but a helpful insight comes from the early design of graphical user interfaces – if tools made by different programmers have enough in common and adhere to conventions, then the burden on the programmer and user is greatly reduced. There are many other optimizations and trade-offs in computing. For example, numerical computations sometimes are done in a different order compared to the way you would do them in math class as a result of numerical approximations made by computers. Even within the R system there are many different styles of programming and problem solving. In this course I emphasize one particular style, now known popularly as the tidyverse. This approach organizes data and results in tables (called tibbles) as much as possible and encourages you to build larger solutions from composing powerful functions together (like th dplyr package). As a result in this course a hidden message throughout most lessons is how to organize your data and results and how to use a small set of powerful functions to solve a large set of general problems. Many other computing systems would work well for this course. Among programmers, a very popular choice is python, which shares a lot in common with R with many add-on packages providing similar functions. As a simplification, python use tends to be favoured by people developing software to solve a particular problem, while R tends to be favoured by people who want to interactively explore their data analysis options and need to develop custom analyses for each problem they encounter. Python and R have both existed since before the year 2000, but the styles of data analysis and problem solving possible with each has grown and converged together considerably in recent years. "],["overview-talk.html", "Chapter 23 Overview talk", " Chapter 23 Overview talk Opening and closing talk Communicating with data Efficiency OptimaiAtion Standardization Binary vs ASCII Denormalization Computational efficiency Reproducibility How do I know it’s right How does someone else know? How do I read it In 6 months Does someone on my team read it Does a completely unrelated person read it For code And graphs And words Time flies like an arrow Fruit flies like a banana Up goer five Simplified English Wikipedia Why r Why not some other langauge Why not some other data format SQL and the tidyvwrse NA and -999 "]]
